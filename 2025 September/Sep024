ðŸ“… Question: 24 Sept 2025
ðŸ”¹ Problem: Design MinMax Queue
// Java
import java.util.*;

class SpecialQueue {
    private Queue<Integer> q;
    private Deque<Integer> minDeque, maxDeque;

    public SpecialQueue() {
        q = new LinkedList<>();
        minDeque = new LinkedList<>();
        maxDeque = new LinkedList<>();
    }

    public void enqueue(int x) {
        q.offer(x);

        while (!minDeque.isEmpty() && minDeque.peekLast() > x) {
            minDeque.pollLast();
        }
        minDeque.offer(x);

        while (!maxDeque.isEmpty() && maxDeque.peekLast() < x) {
            maxDeque.pollLast();
        }
        maxDeque.offer(x);
    }

    public void dequeue() {
        if (q.isEmpty()) return;

        int front = q.poll();
        if (front == minDeque.peek()) minDeque.poll();
        if (front == maxDeque.peek()) maxDeque.poll();
    }

    public int getFront() {
        return q.peek();
    }

    public int getMin() {
        return minDeque.peek();
    }

    public int getMax() {
        return maxDeque.peek();
    }
}


// Cpp 

#include <bits/stdc++.h>
using namespace std;

class SpecialQueue {
    queue<int> q;
    deque<int> minDeque, maxDeque;

public:
    void enqueue(int x) {
        q.push(x);

        while (!minDeque.empty() && minDeque.back() > x)
            minDeque.pop_back();
        minDeque.push_back(x);

        while (!maxDeque.empty() && maxDeque.back() < x)
            maxDeque.pop_back();
        maxDeque.push_back(x);
    }

    void dequeue() {
        if (q.empty()) return;
        int front = q.front();
        q.pop();

        if (!minDeque.empty() && minDeque.front() == front)
            minDeque.pop_front();
        if (!maxDeque.empty() && maxDeque.front() == front)
            maxDeque.pop_front();
    }

    int getFront() {
        return q.front();
    }

    int getMin() {
        return minDeque.front();
    }

    int getMax() {
        return maxDeque.front();
    }
};


//Python 

from collections import deque

class SpecialQueue:
    def __init__(self):
        self.q = deque()
        self.minDeque = deque()
        self.maxDeque = deque()

    def enqueue(self, x: int) -> None:
        self.q.append(x)

        while self.minDeque and self.minDeque[-1] > x:
            self.minDeque.pop()
        self.minDeque.append(x)

        while self.maxDeque and self.maxDeque[-1] < x:
            self.maxDeque.pop()
        self.maxDeque.append(x)

    def dequeue(self) -> None:
        if not self.q: return
        front = self.q.popleft()

        if self.minDeque and self.minDeque[0] == front:
            self.minDeque.popleft()
        if self.maxDeque and self.maxDeque[0] == front:
            self.maxDeque.popleft()

    def getFront(self) -> int:
        return self.q[0]

    def getMin(self) -> int:
        return self.minDeque[0]

    def getMax(self) -> int:
        return self.maxDeque[0]

