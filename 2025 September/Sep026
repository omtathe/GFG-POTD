26 Sep Problem :- Rotate Deque By K
// 
// JAVA
import java.util.*;
class Solution {
    public static void rotateDeque(Deque<Integer> dq, int type, int k) {
        int n = dq.size();
        if (n == 0) return;
        k = k % n;
        if (type == 1) {
            for (int i = 0; i < k; i++) dq.addFirst(dq.removeLast());
        } else {
            for (int i = 0; i < k; i++) dq.addLast(dq.removeFirst());
        }
    }
}


//
// Python
from collections import deque

def rotateDeque(dq, type, k):
    n = len(dq)
    if n == 0: return dq
    k %= n
    if type == 1:
        dq.rotate(k)
    else:
        dq.rotate(-k)
    return list(dq)

dq = deque([1, 2, 3, 4, 5, 6])
print(rotateDeque(dq, 1, 2))


//
//Cpp
#include <bits/stdc++.h>
using namespace std;
void rotateDeque(deque<int>& dq, int type, int k) {
    int n = dq.size();
    if (n == 0) return;
    k %= n;
    if (type == 1) {
        for (int i = 0; i < k; i++) {
            int val = dq.back();
            dq.pop_back();
            dq.push_front(val);
        }
    } else {
        for (int i = 0; i < k; i++) {
            int val = dq.front();
            dq.pop_front();
            dq.push_back(val);
        }
    }
}
int main() {
    deque<int> dq = {1, 2, 3, 4, 5, 6};
    rotateDeque(dq, 1, 2);
    for (int x : dq) cout << x << " ";
}

