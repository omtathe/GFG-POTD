/*
class Node {
    int data;
    Node left, right;

    Node(int val) {
        data = val;
        left = right = null;
    }
}
*/

import java.util.*;

class Solution {
    int preIndex = 0;
    int[] preorder, postorder;
    Map<Integer, Integer> postIndexMap;

    public Node constructTree(int[] pre, int[] post) {
        preorder = pre;
        postorder = post;
        postIndexMap = new HashMap<>();

        // store postorder indices for quick access
        for (int i = 0; i < post.length; i++) {
            postIndexMap.put(post[i], i);
        }

        return buildTree(0, post.length - 1);
    }

    private Node buildTree(int l, int r) {
        // create node for current preorder element
        Node root = new Node(preorder[preIndex++]);

        // base case: single node or no more elements
        if (l == r || preIndex >= preorder.length)
            return root;

        // find left subtree boundary in postorder
        int leftVal = preorder[preIndex];
        int index = postIndexMap.get(leftVal);

        // recursively build left and right subtrees
        if (index <= r) {
            root.left = buildTree(l, index);
            root.right = buildTree(index + 1, r - 1);
        }

        return root;
    }
}
