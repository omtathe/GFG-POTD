class Solution {
  public:
    void solve(int x, int y, vector<vector<int>> &maze, int n, 
               vector<vector<int>> &visited, string path, vector<string> &ans) {
        // Base case: reached destination
        if(x == n-1 && y == n-1) {
            ans.push_back(path);
            return;
        }

        // Mark current cell visited
        visited[x][y] = 1;

        // Movement order: D, L, R, U (lexicographical)
        // Down
        if(x+1 < n && !visited[x+1][y] && maze[x+1][y] == 1) {
            solve(x+1, y, maze, n, visited, path + 'D', ans);
        }
        // Left
        if(y-1 >= 0 && !visited[x][y-1] && maze[x][y-1] == 1) {
            solve(x, y-1, maze, n, visited, path + 'L', ans);
        }
        // Right
        if(y+1 < n && !visited[x][y+1] && maze[x][y+1] == 1) {
            solve(x, y+1, maze, n, visited, path + 'R', ans);
        }
        // Up
        if(x-1 >= 0 && !visited[x-1][y] && maze[x-1][y] == 1) {
            solve(x-1, y, maze, n, visited, path + 'U', ans);
        }

        // Backtrack (unmark)
        visited[x][y] = 0;
    }

    vector<string> ratInMaze(vector<vector<int>>& maze) {
        int n = maze.size();
        vector<string> ans;
        
        if(maze[0][0] == 0 || maze[n-1][n-1] == 0) return ans; // No path if start/end blocked

        vector<vector<int>> visited(n, vector<int>(n, 0));
        string path = "";
        
        solve(0, 0, maze, n, visited, path, ans);
        sort(ans.begin(), ans.end()); // ensure lexicographic order
        return ans;
    }
};
